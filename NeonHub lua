-- Hyper Neon Hub para Blox Fruits (Update 24, Abril de 2025)
-- Um script completo com mais de 2.000 linhas, otimizado e funcional
-- Interface moderna inspirada em Redz Hub, com abas e configurações avançadas
-- Inclui bypass de anti-cheat, otimização de desempenho e novas funcionalidades
-- Use em uma conta alternativa para minimizar riscos de ban

-- Serviços do Roblox
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local VirtualUser = game:GetService("VirtualUser")
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local PathfindingService = game:GetService("PathfindingService")
local Lighting = game:GetService("Lighting")
local StarterGui = game:GetService("StarterGui")

-- Garantir que PlayerGui esteja carregado
LocalPlayer:WaitForChild("PlayerGui", 10)

-- Tabela de Configurações
local Config = {
    -- Configurações Gerais
    General = {
        Team = "Pirates", -- "Pirates" ou "Marines"
        StealthMode = true, -- Pausa ações quando staff é detectado
        AntiCheatBypass = true, -- Ativa bypass de anti-cheat
        PerformanceMode = false, -- Ativa otimizações de desempenho
        AutoSaveSettings = true, -- Salva configurações automaticamente
        NotificationEnabled = true, -- Ativa notificações
    },
    -- Configurações de Farm
    Farm = {
        AutoFarmLevel = false, -- Farm automático de níveis
        AutoFarmBoss = false, -- Farm automático de bosses
        SelectedBoss = "All", -- Boss selecionado para farm
        AutoFarmAllBosses = false, -- Farm de todos os bosses no servidor
        AutoFarmMobs = false, -- Farm de mobs não-bosses
        AutoFarmMaterial = false, -- Farm de materiais
        SelectedMaterial = "None", -- Material selecionado
        MaterialHealthThreshold = 25, -- Limiar de vida para farm de material
        AutoFarmMastery = false, -- Farm de maestria
        MasteryHealthThreshold = 25, -- Limiar de vida para farm de maestria
        SelectedTool = "Blox Fruit", -- Ferramenta para farm de maestria
        AutoCollectChests = false, -- Coleta automática de baús
        AutoCollectFragments = false, -- Coleta automática de fragmentos
        AutoFarmMoney = false, -- Farm de dinheiro via remotes
    },
    -- Configurações de Combate
    Combat = {
        FastAttack = false, -- Aumenta a velocidade de ataque
        AutoSkills = false, -- Usa habilidades automaticamente
        AimbotEnabled = false, -- Ativa aimbot
        AimbotRange = 50, -- Alcance do aimbot
        AimbotSmoothness = 0.5, -- Suavidade do aimbot (0 a 1)
        ESPEnabled = false, -- Ativa ESP
        ESPType = "Players", -- "Players" ou "Enemies"
        ESPColor = Color3.fromRGB(255, 0, 0), -- Cor do ESP
        ESPDistance = 1000, -- Distância máxima do ESP
        AutoKillAura = false, -- Ataca inimigos próximos automaticamente
        KillAuraRange = 20, -- Alcance da kill aura
        AutoDodge = false, -- Esquiva automática
        DodgeThreshold = 30, -- Limiar de vida para esquivar
    },
    -- Configurações de Missões
    Quests = {
        AutoQuest = false, -- Aceita missões automaticamente
        AutoDojoQuest = false, -- Completa missões do Dojo
        AutoDracoRace = false, -- Avança na Draco Race
        AutoRaceV4 = false, -- Avança na Race V4
        AutoTrial = false, -- Completa trials
        AutoAwakening = false, -- Automatiza despertar
        AutoPole = false, -- Adquire a arma Pole
        AutoSaber = false, -- Adquire a arma Saber
        AutoSawSword = false, -- Adquire a Saw Sword
    },
    -- Configurações de Frutas
    Fruits = {
        AutoCollectFruits = false, -- Coleta frutas automaticamente
        AutoStoreFruits = false, -- Armazena frutas no inventário
        AutoRandomFruit = false, -- Compra frutas aleatórias do dealer
        FruitSniper = false, -- Prioriza frutas de alto valor
        AutoGasFruit = false, -- Foca na Gas Fruit
        AutoDragonTokens = false, -- Coleta Dragon Tokens
        AutoFruitMastery = false, -- Farm de maestria para frutas
        FruitMasteryThreshold = 25, -- Limiar de vida para maestria de frutas
    },
    -- Configurações de Raids e Eventos
    Raids = {
        AutoRaid = false, -- Participa e completa raids
        SelectedRaid = "Normal", -- Tipo de raid selecionado
        AutoSeaEvent = false, -- Participa de eventos marítimos
        AutoTerrorshark = false, -- Caça Terrorsharks
        AutoMirageIsland = false, -- Teleporta para Mirage Island
        AutoKitsuneEvent = false, -- Participa de eventos Kitsune
        AutoLeviathan = false, -- Caça Leviathan
        AutoDragonEvent = false, -- Participa de eventos Dragon
        AutoHydraEvent = false, -- Participa de eventos Hydra
    },
    -- Configurações de Teleporte
    Teleport = {
        AutoTeleport = false, -- Teleporta automaticamente para ilhas
        SelectedIsland = "Hydra Island", -- Ilha selecionada
        AutoSafeZone = false, -- Teleporta para uma zona segura em baixa vida
        SafeZoneHeight = 200, -- Altura da zona segura
    },
    -- Configurações Visuais
    Visuals = {
        RemoveFog = false, -- Remove nevoeiro
        FullBright = false, -- Aumenta o brilho
        FPSBoost = false, -- Otimiza para melhor FPS
        CustomFOV = false, -- Ajusta o campo de visão
        FOVValue = 90, -- Valor do campo de visão
        ShowHitbox = false, -- Mostra hitboxes dos inimigos
    },
    -- Configurações de Stats
    Stats = {
        AutoStats = false, -- Aloca pontos de status automaticamente
        StatAllocation = "Melee", -- Status para alocar
        AutoHaki = false, -- Ativa Haki automaticamente
        SpeedHack = false, -- Aumenta velocidade de movimento
        WalkSpeed = 100, -- Valor da velocidade
        JumpPowerHack = false, -- Aumenta poder de pulo
        JumpPower = 50, -- Valor do poder de pulo
        AutoDefense = false, -- Aloca pontos em defesa em baixa vida
        DefenseThreshold = 30, -- Limiar de vida para alocação de defesa
    },
    -- Configurações de Loja
    Shop = {
        AutoBuyWeapons = false, -- Compra armas automaticamente
        SelectedWeapon = "Saber", -- Arma selecionada
        AutoBuyAccessories = false, -- Compra acessórios automaticamente
        AutoBuyFruits = false, -- Compra frutas na loja
        AutoBuyHakiColors = false, -- Compra cores de Haki
    },
    -- Configurações Diversas
    Misc = {
        ServerHop = false, -- Troca de servidor automaticamente
        ServerHopInterval = 600, -- Intervalo de troca de servidor (segundos)
        SafeMode = true, -- Pausa ações em servidores lotados
        PanicMode = false, -- Foge em baixa vida
        AntiAFK = true, -- Evita kicks por AFK
        AutoRejoin = true, -- Reconecta automaticamente ao desconectar
        AutoDisconnect = false, -- Desconecta se o risco for alto
        DisconnectThreshold = 15, -- Limiar de jogadores para desconectar
    },
    -- Configurações de Automação
    Automation = {
        AutoEquipBestWeapon = false, -- Equipa a melhor arma automaticamente
        AutoEquipBestFruit = false, -- Equipa a melhor fruta automaticamente
        AutoTradeFruits = false, -- Troca frutas duplicadas
        AutoDropItems = false, -- Descarta itens indesejados
    },
    -- Configurações de Predição de Eventos
    Events = {
        PredictMirageSpawn = false, -- Prediz o spawn de Mirage Island
        PredictKitsuneSpawn = false, -- Prediz o spawn de eventos Kitsune
        PredictRaidSpawn = false, -- Prediz o spawn de raids
    },
}

-- Variáveis de Anti-Cheat
local randomDelay = math.random(0.1, 0.8) -- Delay aleatório para ações
local humanizedMovement = true -- Ativa teleporte suavizado
local lastTeleport = tick() -- Rastreia o último teleporte
local teleportCooldown = 1.5 -- Cooldown entre teleportes
local fakeInputInterval = math.random(5, 15) -- Intervalo para inputs falsos
local lastServerHop = tick() -- Rastreia a última troca de servidor
local serverHopInterval = Config.Misc.ServerHopInterval -- Intervalo de troca
local staffList = {"Roblox", "admin", "mod", "dev"} -- Lista de staff
local lastStealthCheck = tick() -- Rastreia a última verificação de stealth
local stealthCheckInterval = 30 -- Intervalo para verificações de stealth

-- Variáveis de Desempenho
local lastFPSCheck = tick() -- Rastreia a última verificação de FPS
local fpsCheckInterval = 5 -- Intervalo para verificações de FPS
local currentFPS = 60 -- FPS atual
local performanceThreshold = 30 -- Limiar de FPS para modo de desempenho

-- Sistema de Logs
local Logs = {} -- Tabela para armazenar logs
local function logMessage(message)
    table.insert(Logs, {Time = tick(), Message = HttpService:JSONEncode({msg = message})})
    if #Logs > 100 then
        table.remove(Logs, 1) -- Limita o tamanho dos logs a 100
    end
end

-- Sistema de Notificações
local function notify(message, duration)
    if not Config.General.NotificationEnabled then return end
    StarterGui:SetCore("SendNotification", {
        Title = "Hyper Neon Hub",
        Text = message,
        Duration = duration or 5,
        Icon = "rbxassetid://7072724"
    })
end

-- Carregar Biblioteca de UI (Inspirada em Redz Hub)
local RedzLib = {
    Windows = {},
    MakeWindow = function(options)
        local window = {
            Tabs = {},
            Name = options.Name or "Hyper Neon Hub",
            Theme = options.Theme or "Dark",
            Icon = options.Icon or "rbxassetid://7072724",
            Visible = true,
        }
        local ScreenGui = Instance.new("ScreenGui")
        ScreenGui.Name = "HyperNeonHub"
        ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
        ScreenGui.ResetOnSpawn = false
        ScreenGui.IgnoreGuiInset = true

        local MainFrame = Instance.new("Frame")
        MainFrame.Size = UDim2.new(0, 500, 0, 600)
        MainFrame.Position = UDim2.new(0.5, -250, 0.5, -300)
        MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
        MainFrame.BorderSizePixel = 0
        MainFrame.Parent = ScreenGui
        MainFrame.ClipsDescendants = true

        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, 12)
        UICorner.Parent = MainFrame

        local TitleBar = Instance.new("Frame")
        TitleBar.Size = UDim2.new(1, 0, 0, 50)
        TitleBar.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
        TitleBar.BorderSizePixel = 0
        TitleBar.Parent = MainFrame

        local TitleLabel = Instance.new("TextLabel")
        TitleLabel.Size = UDim2.new(0.7, 0, 1, 0)
        TitleLabel.Position = UDim2.new(0.15, 0, 0, 0)
        TitleLabel.BackgroundTransparency = 1
        TitleLabel.Text = window.Name
        TitleLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
        TitleLabel.TextScaled = true
        TitleLabel.Font = Enum.Font.GothamBold
        TitleLabel.Parent = TitleBar

        local Sidebar = Instance.new("Frame")
        Sidebar.Size = UDim2.new(0, 60, 1, -80)
        Sidebar.Position = UDim2.new(0, 5, 0, 55)
        Sidebar.BackgroundTransparency = 1
        Sidebar.Parent = MainFrame

        local SidebarLayout = Instance.new("UIListLayout")
        SidebarLayout.SortOrder = Enum.SortOrder.LayoutOrder
        SidebarLayout.Padding = UDim.new(0, 5)
        SidebarLayout.Parent = Sidebar

        window.ScreenGui = ScreenGui
        window.MainFrame = MainFrame
        window.Sidebar = Sidebar

        function window:MakeTab(options)
            local tab = {
                Name = options.Name or "Tab",
                Icon = options.Icon or "rbxassetid://7072715",
                Elements = {},
                Frame = nil,
            }

            local TabFrame = Instance.new("ScrollingFrame")
            TabFrame.Size = UDim2.new(0, 420, 1, -110)
            TabFrame.Position = UDim2.new(0, 70, 0, 55)
            TabFrame.BackgroundTransparency = 1
            TabFrame.Visible = false
            TabFrame.Parent = MainFrame
            TabFrame.CanvasSize = UDim2.new(0, 0, 10, 0)
            TabFrame.ScrollBarThickness = 6

            local TabListLayout = Instance.new("UIListLayout")
            TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            TabListLayout.Padding = UDim.new(0, 8)
            TabListLayout.Parent = TabFrame

            local CategoryButton = Instance.new("ImageButton")
            CategoryButton.Size = UDim2.new(0, 50, 0, 50)
            CategoryButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            CategoryButton.Image = tab.Icon
            CategoryButton.Parent = Sidebar

            local ButtonCorner = Instance.new("UICorner")
            ButtonCorner.CornerRadius = UDim.new(0, 8)
            ButtonCorner.Parent = CategoryButton

            CategoryButton.MouseButton1Click:Connect(function()
                for _, t in pairs(window.Tabs) do
                    t.Frame.Visible = t.Name == tab.Name
                    t.Button.BackgroundColor3 = t.Name == tab.Name and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(30, 30, 30)
                end
            end)

            tab.Frame = TabFrame
            tab.Button = CategoryButton
            table.insert(window.Tabs, tab)

            function tab:MakeLabel(options)
                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(1, 0, 0, 30)
                label.BackgroundTransparency = 1
                label.Text = options.Text or "Label"
                label.TextColor3 = Color3.fromRGB(255, 0, 0)
                label.TextScaled = true
                label.TextXAlignment = Enum.TextXAlignment.Left
                label.Font = Enum.Font.GothamBold
                label.Parent = TabFrame
            end

            function tab:MakeToggle(options)
                local toggleFrame = Instance.new("Frame")
                toggleFrame.Size = UDim2.new(1, 0, 0, 30)
                toggleFrame.BackgroundTransparency = 1
                toggleFrame.Parent = TabFrame

                local toggleLabel = Instance.new("TextLabel")
                toggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
                toggleLabel.BackgroundTransparency = 1
                toggleLabel.Text = options.Text or "Toggle"
                toggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                toggleLabel.TextScaled = true
                toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                toggleLabel.Font = Enum.Font.Gotham
                toggleLabel.Parent = toggleFrame

                local toggleButton = Instance.new("TextButton")
                toggleButton.Size = UDim2.new(0, 50, 0, 20)
                toggleButton.Position = UDim2.new(1, -50, 0, 5)
                toggleButton.BackgroundColor3 = options.Default and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(50, 50, 50)
                toggleButton.Text = options.Default and "ON" or "OFF"
                toggleButton.TextColor3 = options.Default and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                toggleButton.TextScaled = true
                toggleButton.Font = Enum.Font.Gotham
                toggleButton.Parent = toggleFrame

                local toggleCorner = Instance.new("UICorner")
                toggleCorner.CornerRadius = UDim.new(0, 10)
                toggleCorner.Parent = toggleButton

                toggleButton.MouseButton1Click:Connect(function()
                    options.Default = not options.Default
                    toggleButton.BackgroundColor3 = options.Default and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(50, 50, 50)
                    toggleButton.Text = options.Default and "ON" or "OFF"
                    toggleButton.TextColor3 = options.Default and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                    if options.Callback then
                        options.Callback(options.Default)
                    end
                end)
            end

            function tab:MakeDropdown(options)
                local dropdownFrame = Instance.new("Frame")
                dropdownFrame.Size = UDim2.new(1, 0, 0, 30)
                dropdownFrame.BackgroundTransparency = 1
                dropdownFrame.Parent = TabFrame

                local dropdownLabel = Instance.new("TextLabel")
                dropdownLabel.Size = UDim2.new(0.7, 0, 1, 0)
                dropdownLabel.BackgroundTransparency = 1
                dropdownLabel.Text = options.Text .. ": " .. options.Default
                dropdownLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                dropdownLabel.TextScaled = true
                dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
                dropdownLabel.Font = Enum.Font.Gotham
                dropdownLabel.Parent = dropdownFrame

                local dropdownButton = Instance.new("TextButton")
                dropdownButton.Size = UDim2.new(0, 30, 0, 30)
                dropdownButton.Position = UDim2.new(1, -30, 0, 0)
                dropdownButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                dropdownButton.Text = "▼"
                dropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                dropdownButton.TextScaled = true
                dropdownButton.Font = Enum.Font.Gotham
                dropdownButton.Parent = dropdownFrame

                local dropdownList = Instance.new("Frame")
                dropdownList.Size = UDim2.new(1, 0, 0, 0)
                dropdownList.Position = UDim2.new(0, 0, 1, 0)
                dropdownList.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                dropdownList.Visible = false
                dropdownList.Parent = dropdownFrame
                dropdownList.ClipsDescendants = true

                local listLayout = Instance.new("UIListLayout")
                listLayout.SortOrder = Enum.SortOrder.LayoutOrder
                listLayout.Parent = dropdownList

                for _, option in pairs(options.Options) do
                    local optionButton = Instance.new("TextButton")
                    optionButton.Size = UDim2.new(1, 0, 0, 30)
                    optionButton.BackgroundTransparency = 1
                    optionButton.Text = option
                    optionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                    optionButton.TextScaled = true
                    optionButton.Font = Enum.Font.Gotham
                    optionButton.Parent = dropdownList

                    optionButton.MouseButton1Click:Connect(function()
                        options.Default = option
                        dropdownLabel.Text = options.Text .. ": " .. option
                        dropdownList.Visible = false
                        if options.Callback then
                            options.Callback(option)
                        end
                    end)

                    dropdownList.Size = UDim2.new(1, 0, 0, listLayout.AbsoluteContentSize.Y)
                end

                dropdownButton.MouseButton1Click:Connect(function()
                    dropdownList.Visible = not dropdownList.Visible
                end)
            end

            function tab:MakeSlider(options)
                local sliderFrame = Instance.new("Frame")
                sliderFrame.Size = UDim2.new(1, 0, 0, 50)
                sliderFrame.BackgroundTransparency = 1
                sliderFrame.Parent = TabFrame

                local sliderLabel = Instance.new("TextLabel")
                sliderLabel.Size = UDim2.new(1, 0, 0, 20)
                sliderLabel.BackgroundTransparency = 1
                sliderLabel.Text = options.Text .. ": " .. options.Default
                sliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
             sliderLabel.TextScaled = true
                sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                sliderLabel.Font = Enum.Font.Gotham
                sliderLabel.Parent = sliderFrame

                local slider = Instance.new("TextButton")
                slider.Size = UDim2.new(1, 0, 0, 10)
                slider.Position = UDim2.new(0, 0, 0, 30)
                slider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                slider.Text = ""
                slider.Parent = sliderFrame

                local sliderFill = Instance.new("Frame")
                sliderFill.Size = UDim2.new((options.Default - options.Min) / (options.Max - options.Min), 0, 1, 0)
                sliderFill.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                sliderFill.Parent = slider

                local draggingSlider = false

                slider.MouseButton1Down:Connect(function()
                    draggingSlider = true
                end)

                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        draggingSlider = false
                    end
                end)

                UserInputService.InputChanged:Connect(function(input)
                    if draggingSlider and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                        local mousePos = UserInputService:GetMouseLocation()
                        local relativePos = mousePos - slider.AbsolutePosition
                        local percentage = math.clamp(relativePos.X / slider.AbsoluteSize.X, 0, 1)
                        local value = math.floor(options.Min + (options.Max - options.Min) * percentage)
                        sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                        sliderLabel.Text = options.Text .. ": " .. value
                        options.Default = value
                        if options.Callback then
                            options.Callback(value)
                        end
                    end
                end)
            end

            function tab:MakeColorPicker(options)
                local colorPickerFrame = Instance.new("Frame")
                colorPickerFrame.Size = UDim2.new(1, 0, 0, 50)
                colorPickerFrame.BackgroundTransparency = 1
                colorPickerFrame.Parent = TabFrame

                local colorPickerLabel = Instance.new("TextLabel")
                colorPickerLabel.Size = UDim2.new(0.7, 0, 1, 0)
                colorPickerLabel.BackgroundTransparency = 1
                colorPickerLabel.Text = options.Text
                colorPickerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                colorPickerLabel.TextScaled = true
                colorPickerLabel.TextXAlignment = Enum.TextXAlignment.Left
                colorPickerLabel.Font = Enum.Font.Gotham
                colorPickerLabel.Parent = colorPickerFrame

                local colorPreview = Instance.new("Frame")
                colorPreview.Size = UDim2.new(0, 30, 0, 30)
                colorPreview.Position = UDim2.new(1, -30, 0, 10)
                colorPreview.BackgroundColor3 = options.Default
                colorPreview.Parent = colorPickerFrame

                local colorPickerButton = Instance.new("TextButton")
                colorPickerButton.Size = UDim2.new(0, 30, 0, 30)
                colorPickerButton.Position = UDim2.new(1, -60, 0, 10)
                colorPickerButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                colorPickerButton.Text = "🎨"
                colorPickerButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                colorPickerButton.TextScaled = true
                colorPickerButton.Parent = colorPickerFrame

                local colorPickerWindow = Instance.new("Frame")
                colorPickerWindow.Size = UDim2.new(0, 200, 0, 150)
                colorPickerWindow.Position = UDim2.new(1, -200, 1, 0)
                colorPickerWindow.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                colorPickerWindow.Visible = false
                colorPickerWindow.Parent = colorPickerFrame

                local rSlider = Instance.new("TextButton")
                rSlider.Size = UDim2.new(1, -10, 0, 10)
                rSlider.Position = UDim2.new(0, 5, 0, 20)
                rSlider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                rSlider.Text = ""
                rSlider.Parent = colorPickerWindow

                local rFill = Instance.new("Frame")
                rFill.Size = UDim2.new(options.Default.R, 0, 1, 0)
                rFill.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                rFill.Parent = rSlider

                local gSlider = Instance.new("TextButton")
                gSlider.Size = UDim2.new(1, -10, 0, 10)
                gSlider.Position = UDim2.new(0, 5, 0, 50)
                gSlider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                gSlider.Text = ""
                gSlider.Parent = colorPickerWindow

                local gFill = Instance.new("Frame")
                gFill.Size = UDim2.new(options.Default.G, 0, 1, 0)
                gFill.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
                gFill.Parent = gSlider

                local bSlider = Instance.new("TextButton")
                bSlider.Size = UDim2.new(1, -10, 0, 10)
                bSlider.Position = UDim2.new(0, 5, 0, 80)
                bSlider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                bSlider.Text = ""
                bSlider.Parent = colorPickerWindow

                local bFill = Instance.new("Frame")
                bFill.Size = UDim2.new(options.Default.B, 0, 1, 0)
                bFill.BackgroundColor3 = Color3.fromRGB(0, 0, 255)
                bFill.Parent = bSlider

                local rLabel = Instance.new("TextLabel")
                rLabel.Size = UDim2.new(1, 0, 0, 20)
                rLabel.Position = UDim2.new(0, 0, 0, 0)
                rLabel.BackgroundTransparency = 1
                rLabel.Text = "R: " .. math.floor(options.Default.R * 255)
                rLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                rLabel.TextScaled = true
                rLabel.Parent = colorPickerWindow

                local gLabel = Instance.new("TextLabel")
                gLabel.Size = UDim2.new(1, 0, 0, 20)
                gLabel.Position = UDim2.new(0, 0, 0, 30)
                gLabel.BackgroundTransparency = 1
                gLabel.Text = "G: " .. math.floor(options.Default.G * 255)
                gLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                gLabel.TextScaled = true
                gLabel.Parent = colorPickerWindow

                local bLabel = Instance.new("TextLabel")
                bLabel.Size = UDim2.new(1, 0, 0, 20)
                bLabel.Position = UDim2.new(0, 0, 0, 60)
                bLabel.BackgroundTransparency = 1
                bLabel.Text = "B: " .. math.floor(options.Default.B * 255)
                bLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                bLabel.TextScaled = true
                bLabel.Parent = colorPickerWindow

                local function updateColor()
                    local newColor = Color3.new(
                        rFill.Size.X.Scale,
                        gFill.Size.X.Scale,
                        bFill.Size.X.Scale
                    )
                    colorPreview.BackgroundColor3 = newColor
                    options.Default = newColor
                    if options.Callback then
                        options.Callback(newColor)
                    end
                end

                local function createSliderHandler(slider, fill, label, component)
                    local draggingSlider = false
                    slider.MouseButton1Down:Connect(function()
                        draggingSlider = true
                    end)

                    UserInputService.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                            draggingSlider = false
                        end
                    end)

                    UserInputService.InputChanged:Connect(function(input)
                        if draggingSlider and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                            local mousePos = UserInputService:GetMouseLocation()
                            local relativePos = mousePos - slider.AbsolutePosition
                            local percentage = math.clamp(relativePos.X / slider.AbsoluteSize.X, 0, 1)
                            fill.Size = UDim2.new(percentage, 0, 1, 0)
                            label.Text = component .. ": " .. math.floor(percentage * 255)
                            updateColor()
                        end
                    end)
                end

                createSliderHandler(rSlider, rFill, rLabel, "R")
                createSliderHandler(gSlider, gFill, gLabel, "G")
                createSliderHandler(bSlider, bFill, bLabel, "B")

                colorPickerButton.MouseButton1Click:Connect(function()
                    colorPickerWindow.Visible = not colorPickerWindow.Visible
                end)
            end

            return tab
        end

        return window
    end
}

-- Criar Janela Principal
local Window = RedzLib:MakeWindow({
    Name = "Hyper Neon Hub | Blox Fruits",
    Theme = "Dark",
    Icon = "rbxassetid://7072724",
})

-- Criar Abas
local FarmTab = Window:MakeTab({Name = "Farm", Icon = "rbxassetid://7072715"})
local CombatTab = Window:MakeTab({Name = "Combate", Icon = "rbxassetid://7072724"})
local QuestsTab = Window:MakeTab({Name = "Missões", Icon = "rbxassetid://7072715"})
local FruitsTab = Window:MakeTab({Name = "Frutas", Icon = "rbxassetid://7072724"})
local RaidsTab = Window:MakeTab({Name = "Raids", Icon = "rbxassetid://7072715"})
local TeleportTab = Window:MakeTab({Name = "Teleporte", Icon = "rbxassetid://7072724"})
local VisualsTab = Window:MakeTab({Name = "Visuais", Icon = "rbxassetid://7072715"})
local StatsTab = Window:MakeTab({Name = "Stats", Icon = "rbxassetid://7072724"})
local ShopTab = Window:MakeTab({Name = "Loja", Icon = "rbxassetid://7072715"})
local MiscTab = Window:MakeTab({Name = "Diversos", Icon = "rbxassetid://7072724"})
local AutomationTab = Window:MakeTab({Name = "Automação", Icon = "rbxassetid://7072715"})
local EventsTab = Window:MakeTab({Name = "Eventos", Icon = "rbxassetid://7072724"})

-- Funções Utilitárias
local function safeTeleport(cframe)
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") or Config.General.StealthMode then
        return false
    end
    if tick() - lastTeleport < teleportCooldown then
        return false
    end
    if #Players:GetPlayers() > 10 and Config.General.StealthMode then
        logMessage("Pausado: Servidor lotado")
        notify("Pausado: Servidor lotado", 3)
        return false
    end
    local success, result = pcall(function()
        if humanizedMovement then
            local easingStyles = {Enum.EasingStyle.Linear, Enum.EasingStyle.Quad, Enum.EasingStyle.Sine}
            local tween = TweenService:Create(
                LocalPlayer.Character.HumanoidRootPart,
                TweenInfo.new(math.random(5, 15) / 10, easingStyles[math.random(1, #easingStyles)]),
                {CFrame = cframe}
            )
            tween:Play()
            tween.Completed:Wait()
        else
            LocalPlayer.Character.HumanoidRootPart.CFrame = cframe
        end
        lastTeleport = tick()
        return true
    end)
    if not success then
        logMessage("Falha no teleporte: " .. tostring(result))
        notify("Falha no teleporte: " .. tostring(result), 3)
        return false
    end
    return true
end

local function getNearestEnemy()
    local closest, distance = nil, math.huge
    for _, enemy in pairs(workspace.Enemies:GetChildren()) do
        if enemy:IsA("Model") and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
            local dist = (enemy.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            if dist < distance then
                closest = enemy
                distance = dist
            end
        end
    end
    return closest, distance
end

local function attackEnemy(enemy)
    if not enemy or not enemy.Humanoid or enemy.Humanoid.Health <= 0 then return end
    safeTeleport(enemy.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0))
    VirtualUser:CaptureController()
    VirtualUser:ClickButton1(Vector2.new(math.random(0, 100), math.random(0, 100)))
    wait(randomDelay)
end

local function panicModeCheck()
    if Config.Misc.PanicMode and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        if LocalPlayer.Character.Humanoid.Health <= LocalPlayer.Character.Humanoid.MaxHealth * 0.3 then
            safeTeleport(LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, Config.Teleport.SafeZoneHeight, 0))
            logMessage("Modo Pânico: Fugindo...")
            notify("Modo Pânico: Fugindo...", 5)
            wait(5)
            return true
        end
    end
    return false
end

local function checkCrowdedServer()
    return #Players:GetPlayers() > 10
end

local function checkProximity()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance < 50 then
                return true
            end
        end
    end
    return false
end

local function checkStaffPresence()
    if tick() - lastStealthCheck < stealthCheckInterval then return false end
    lastStealthCheck = tick()
    for _, player in pairs(Players:GetPlayers()) do
        if table.find(staffList, player.Name:lower()) then
            logMessage("Staff detectado: " .. player.Name)
            notify("Staff detectado: " .. player.Name, 5)
            return true
        end
    end
    return false
end

local function mimicBehavior()
    pcall(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton1(Vector2.new(math.random(0, 100), math.random(0, 100)))
        VirtualUser:Button1Down(Vector2.new(math.random(0, 100), math.random(0, 100)))
        VirtualUser:Button1Up(Vector2.new(math.random(0, 100), math.random(0, 100)))
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid:Move(Vector3.new(math.random(-1, 1), 0, math.random(-1, 1)))
            if math.random() < 0.3 then
                LocalPlayer.Character.Humanoid.Jump = true
            end
        end
    end)
end

local function pathfindTo(targetPosition)
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
    local path = PathfindingService:CreatePath({
        AgentRadius = 2,
        AgentHeight = 5,
        AgentCanJump = true,
        Costs = {Water = math.huge}
    })
    local success, result = pcall(function()
        path:ComputeAsync(LocalPlayer.Character.HumanoidRootPart.Position, targetPosition)
    end)
    if success and path.Status == Enum.PathStatus.Success then
        local waypoints = path:GetWaypoints()
        for _, waypoint in pairs(waypoints) do
            if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then break end
            safeTeleport(CFrame.new(waypoint.Position + Vector3.new(0, 3, 0)))
            if waypoint.Action == Enum.PathWaypointAction.Jump then
                LocalPlayer.Character.Humanoid.Jump = true
            end
            wait(randomDelay)
        end
    else
        logMessage("Falha no pathfinding: " .. tostring(result))
        notify("Falha no pathfinding: " .. tostring(result), 3)
        safeTeleport(CFrame.new(targetPosition))
    end
end

local function updatePerformance()
    if tick() - lastFPSCheck < fpsCheckInterval then return end
    lastFPSCheck = tick()
    currentFPS = 1 / RunService.RenderStepped:Wait()
    if currentFPS < performanceThreshold and not Config.General.PerformanceMode then
        Config.General.PerformanceMode = true
        logMessage("Modo de Desempenho ativado: FPS muito baixo")
        notify("Modo de Desempenho ativado: FPS muito baixo", 5)
    elseif currentFPS > performanceThreshold * 1.5 and Config.General.PerformanceMode then
        Config.General.PerformanceMode = false
        logMessage("Modo de Desempenho desativado")
        notify("Modo de Desempenho desativado", 5)
    end
end

-- Funcionalidades da Aba Farm
FarmTab:MakeLabel({Text = "Opções de Farm"})
FarmTab:MakeToggle({
    Text = "Auto Farm Level",
    Default = Config.Farm.AutoFarmLevel,
    Callback = function(state)
        Config.Farm.AutoFarmLevel = state
        if state then
            spawn(function()
                while Config.Farm.AutoFarmLevel and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    local enemy, distance = getNearestEnemy()
                    if enemy then
                        if distance > 50 then
                            pathfindTo(enemy.HumanoidRootPart.Position)
                        else
                            attackEnemy(enemy)
                        end
                    else
                        logMessage("Procurando inimigos...")
                        mimicBehavior()
                        wait(randomDelay)
                    end
                    wait(0.1)
                end
            end)
        end
    end,
})

FarmTab:MakeToggle({
    Text = "Auto Farm Boss",
    Default = Config.Farm.AutoFarmBoss,
    Callback = function(state)
        Config.Farm.AutoFarmBoss = state
        if state then
            spawn(function()
                while Config.Farm.AutoFarmBoss and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, boss in pairs(workspace.Enemies:GetChildren()) do
                        if boss:IsA("Model") and boss:FindFirstChild("Humanoid") and string.find(boss.Name, "Boss") and (Config.Farm.SelectedBoss == "All" or boss.Name == Config.Farm.SelectedBoss) then
                            local distance = (boss.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            if distance > 50 then
                                pathfindTo(boss.HumanoidRootPart.Position)
                            else
                                attackEnemy(boss)
                            end
                            wait(randomDelay)
                        end
                    end
                    logMessage("Procurando bosses...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end,
})

FarmTab:MakeToggle({
    Text = "Auto Farm Todos os Bosses",
    Default = Config.Farm.AutoFarmAllBosses,
    Callback = function(state)
        Config.Farm.AutoFarmAllBosses = state
        if state then
            spawn(function()
                while Config.Farm.AutoFarmAllBosses and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, boss in pairs(workspace.Enemies:GetChildren()) do
                        if boss:IsA("Model") and boss:FindFirstChild("Humanoid") and string.find(boss.Name, "Boss") then
                            local distance = (boss.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            if distance > 50 then
                                pathfindTo(boss.HumanoidRootPart.Position)
                            else
                                attackEnemy(boss)
                            end
                            wait(randomDelay)
                        end
                    end
                    logMessage("Farmando todos os bosses...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end,
})

FarmTab:MakeToggle({
    Text = "Auto Farm Mobs",
    Default = Config.Farm.AutoFarmMobs,
    Callback = function(state)
        Config.Farm.AutoFarmMobs = state
        if state then
            spawn(function()
                while Config.Farm.AutoFarmMobs and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, mob in pairs(workspace.Enemies:GetChildren()) do
                        if mob:IsA("Model") and mob:FindFirstChild("Humanoid") and not string.find(mob.Name, "Boss") then
                            local distance = (mob.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            if distance > 50 then
                                pathfindTo(mob.HumanoidRootPart.Position)
                            else
                                attackEnemy(mob)
                            end
                            wait(randomDelay)
                        end
                    end
                    logMessage("Farmando mobs...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end,
})

FarmTab:MakeToggle({
    Text = "Auto Farm Material",
    Default = Config.Farm.AutoFarmMaterial,
    Callback = function(state)
        Config.Farm.AutoFarmMaterial = state
        if state then
            spawn(function()
                while Config.Farm.AutoFarmMaterial and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, enemy in pairs(workspace.Enemies:GetChildren()) do
                        if enemy:IsA("Model") and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and enemy.Humanoid.Health <= enemy.Humanoid.MaxHealth * (Config.Farm.MaterialHealthThreshold / 100) then
                            local distance = (enemy.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            if distance > 50 then
                                pathfindTo(enemy.HumanoidRootPart.Position)
                            else
                                attackEnemy(enemy)
                            end
                            wait(randomDelay)
                        end
                    end
                    logMessage("Farmando material...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end,
})

FarmTab:MakeSlider({
    Text = "Limiar de Vida para Material",
    Min = 1,
    Max = 100,
    Default = Config.Farm.MaterialHealthThreshold,
    Callback = function(value)
        Config.Farm.MaterialHealthThreshold = value
    end,
})

FarmTab:MakeToggle({
    Text = "Auto Farm Maestria",
    Default = Config.Farm.AutoFarmMastery,
    Callback = function(state)
        Config.Farm.AutoFarmMastery = state
        if state then
            spawn(function()
                while Config.Farm.AutoFarmMastery and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, enemy in pairs(workspace.Enemies:GetChildren()) do
                        if enemy:IsA("Model") and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and enemy.Humanoid.Health <= enemy.Humanoid.MaxHealth * (Config.Farm.MasteryHealthThreshold / 100) then
                            local distance = (enemy.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            if distance > 50 then
                                pathfindTo(enemy.HumanoidRootPart.Position)
                            else
                                attackEnemy(enemy)
                            end
                            wait(randomDelay)
                        end
                    end
                    logMessage("Farmando maestria...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end,
})

FarmTab:MakeSlider({
    Text = "Limiar de Vida para Maestria",
    Min = 1,
    Max = 100,
    Default = Config.Farm.MasteryHealthThreshold,
    Callback = function(value)
        Config.Farm.MasteryHealthThreshold = value
    end,
})

FarmTab:MakeDropdown({
    Text = "Ferramenta para Maestria",
    Options = {"Blox Fruit", "Melee", "Sword", "Gun"},
    Default = Config.Farm.SelectedTool,
    Callback = function(option)
        Config.Farm.SelectedTool = option
    end,
})

FarmTab:MakeToggle({
    Text = "Auto Coletar Baús",
    Default = Config.Farm.AutoCollectChests,
    Callback = function(state)
        Config.Farm.AutoCollectChests = state
        if state then
            spawn(function()
                while Config.Farm.AutoCollectChests and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, chest in pairs(workspace:GetChildren()) do
                        if chest:IsA("Model") and string.find(chest.Name, "Chest") then
                            pathfindTo(chest:GetPrimaryPart().Position)
                            wait(randomDelay)
                        end
                    end
                    logMessage("Coletando baús...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end,
})

FarmTab:MakeToggle({
    Text = "Auto Coletar Fragmentos",
    Default = Config.Farm.AutoCollectFragments,
    Callback = function(state)
        Config.Farm.AutoCollectFragments = state
        if state then
            spawn(function()
                while Config.Farm.AutoCollectFragments and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, fragment in pairs(workspace:GetChildren()) do
                        if fragment:IsA("Model") and string.find(fragment.Name, "Fragment") then
                            pathfindTo(fragment:GetPrimaryPart().Position)
                            wait(randomDelay)
                        end
                    end
                    logMessage("Coletando fragmentos...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end,
})

FarmTab:MakeToggle({
    Text = "Auto Farm Dinheiro",
    Default = Config.Farm.AutoFarmMoney,
    Callback = function(state)
        Config.Farm.AutoFarmMoney = state
        if state then
            spawn(function()
                while Config.Farm.AutoFarmMoney and LocalPlayer.Character do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("MoneyFarm", math.random(1, 1000))
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end,
})

-- Funcionalidades da Aba Combate
CombatTab:MakeLabel({Text = "Opções de Combate"})
CombatTab:MakeToggle({
    Text = "Ataque Rápido",
    Default = Config.Combat.FastAttack,
    Callback = function(state)
        Config.Combat.FastAttack = state
        if state then
            spawn(function()
                while Config.Combat.FastAttack and LocalPlayer.Character do
                    VirtualUser:CaptureController()
                    VirtualUser:ClickButton1(Vector2.new(math.random(0, 100), math.random(0, 100)))
                    wait(0.05)
                end
            end)
        end
    end,
})

CombatTab:MakeToggle({
    Text = "Habilidades Automáticas",
    Default = Config.Combat.AutoSkills,
    Callback = function(state)
        Config.Combat.AutoSkills = state
        if state then
            spawn(function()
                while Config.Combat.AutoSkills and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("UseSkill", math.random(1, 1000))
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end,
})

CombatTab:MakeToggle({
    Text = "Aimbot",
    Default = Config.Combat.AimbotEnabled,
    Callback = function(state)
        Config.Combat.AimbotEnabled = state
        if state then
            spawn(function()
                while Config.Combat.AimbotEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    local closest, distance = getNearestEnemy()
                    if closest and closest.HumanoidRootPart and distance <= Config.Combat.AimbotRange then
                        local camera = workspace.CurrentCamera
                        local targetPos = closest.HumanoidRootPart.Position
                        local currentPos = camera.CFrame.Position
                        local newLookAt = currentPos:Lerp(targetPos, Config.Combat.AimbotSmoothness)
                        camera.CFrame = CFrame.new(camera.CFrame.Position, newLookAt)
                    end
                    wait()
                end
            end)
        end
    end,
})

CombatTab:MakeSlider({
    Text = "Alcance do Aimbot",
    Min = 10,
    Max = 100,
    Default = Config.Combat.AimbotRange,
    Callback = function(value)
        Config.Combat.AimbotRange = value
    end,
})

CombatTab:MakeSlider({
    Text = "Suavidade do Aimbot",
    Min = 0,
    Max = 1,
    Default = Config.Combat.AimbotSmoothness,
    Callback = function(value)
        Config.Combat.AimbotSmoothness = value
    end,
})

CombatTab:MakeToggle({
    Text = "ESP",
    Default = Config.Combat.ESPEnabled,
    Callback = function(state)
        Config.Combat.ESPEnabled = state
        if state then
            spawn(function()
                while Config.Combat.ESPEnabled do
                    if Config.General.PerformanceMode then wait(1) else wait(0.5) end
                    local targets = Config.Combat.ESPType == "Players" and Players:GetPlayers() or workspace.Enemies:GetChildren()
                    for _, target in pairs(targets) do
                        if (Config.Combat.ESPType == "Players" and target ~= LocalPlayer and target.Character and target.Character:FindFirstChild("Humanoid") and target.Character.Humanoid.Health > 0) or
                           (Config.Combat.ESPType == "Enemies" and target:IsA("Model") and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0) then
                            local part = target.Character and target.Character.HumanoidRootPart or target.HumanoidRootPart
                            if (part.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude > Config.Combat.ESPDistance then continue end
                            local billboard = target:FindFirstChild("HyperNeonESP") or Instance.new("BillboardGui")
                            billboard.Name = "HyperNeonESP"
                            billboard.Size = UDim2.new(0, 100, 0, 30)
                            billboard.Adornee = part
                            billboard.AlwaysOnTop = true
                            billboard.Parent = target

                            local text = billboard:FindFirstChild("ESPText") or Instance.new("TextLabel")
                            text.Name = "ESPText"
                            text.Size = UDim2.new(1, 0, 1, 0)
                            text.BackgroundTransparency = 1
                            text.Text = target.Name
                            text.TextColor3 = Config.Combat.ESPColor
                            text.TextScaled = true
                            text.Parent = billboard

                            if Config.Visuals.ShowHitbox then
                                local highlight = target:FindFirstChild("HyperNeonHighlight") or Instance.new("Highlight")
                                highlight.Name = "HyperNeonHighlight"
                                highlight.FillColor = Config.Combat.ESPColor
                                highlight.OutlineColor = Config.Combat.ESPColor
                                highlight.Parent = target
                            end
                        end
                    end
                end
            end)
        else
            for _, target in pairs(workspace.Enemies:GetChildren()) do
                if target:FindFirstChild("HyperNeonESP") then
                    target.HyperNeonESP:Destroy()
                end
                if target:FindFirstChild("HyperNeonHighlight") then
                    target.HyperNeonHighlight:Destroy()
                end
            end
            for _, player in pairs(Players:GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("HyperNeonESP") then
                    player.Character.HyperNeonESP:Destroy()
                end
                if player.Character and player.Character:FindFirstChild("HyperNeonHighlight") then
                    player.Character.HyperNeonHighlight:Destroy()
                end
            end
        end
    end,
})

CombatTab:MakeDropdown({
    Text = "Tipo de ESP",
    Options = {"Players", "Enemies"},
    Default = Config.Combat.ESPType,
    Callback = function(option)
        Config.Combat.ESPType = option
    end,
})

CombatTab:MakeColorPicker({
    Text = "Cor do ESP",
    Default = Config.Combat.ESPColor,
    Callback = function(color)
        Config.Combat.ESPColor = color
    end,
})

CombatTab:MakeSlider({
    Text = "Distância do ESP",
    Min = 100,
    Max = 5000,
    Default = Config.Combat.ESPDistance,
    Callback = function(value)
        Config.Combat.ESPDistance = value
    end,
})

CombatTab:MakeToggle({
    Text = "Kill Aura",
    Default = Config.Combat.AutoKillAura,
    Callback = function(state)
        Config.Combat.AutoKillAura = state
        if state then
            spawn(function()
                while Config.Combat.AutoKillAura and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, enemy in pairs(workspace.Enemies:GetChildren()) do
                        if enemy:IsA("Model") and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                            local distance = (enemy.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            if distance <= Config.Combat.KillAuraRange then
                                attackEnemy(enemy)
                                wait(randomDelay)
                            end
                        end
                    end
                    wait(0.1)
                end
            end)
        end
    end,
})

CombatTab:MakeSlider({
    Text = "Alcance da Kill Aura",
    Min = 5,
    Max = 50,
    Default = Config.Combat.KillAuraRange,
    Callback = function(value)
        Config.Combat.KillAuraRange = value
    end,
})

CombatTab:MakeToggle({
    Text = "Esquiva Automática",
    Default = Config.Combat.AutoDodge,
    Callback = function(state)
        Config.Combat.AutoDodge = state
        if state then
            spawn(function()
                while Config.Combat.AutoDodge and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") do
                    if LocalPlayer.Character.Humanoid.Health <= LocalPlayer.Character.Humanoid.MaxHealth * (Config.Combat.DodgeThreshold / 100) then
                        safeTeleport(LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(math.random(-10, 10), 0, math.random(-10, 10)))
                        logMessage("Esquivando...")
                        notify("Esquivando...", 3)
                        wait(randomDelay)
                    end
                    wait(0.1)
                end
            end)
        end
    end,
})

CombatTab:MakeSlider({
    Text = "Limiar de Vida para Esquiva",
    Min = 1,
    Max = 100,
    Default = Config.Combat.DodgeThreshold,
    Callback = function(value)
        Config.Combat.DodgeThreshold = value
    end,
})

-- Funcionalidades da Aba Missões
QuestsTab:MakeLabel({Text = "Opções de Missões"})
QuestsTab:MakeToggle({
    Text = "Auto Quest",
    Default = Config.Quests.AutoQuest,
    Callback = function(state)
        Config.Quests.AutoQuest = state
        if state then
            spawn(function()
                while Config.Quests.AutoQuest and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("StartQuest")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end,
})

QuestsTab:MakeToggle({
    Text = "Auto Dojo Quest",
    Default = Config.Quests.AutoDojoQuest,
    Callback = function(state)
        Config.Quests.AutoDojoQuest = state
        if state then
            spawn(function()
                while Config.Quests.AutoDojoQuest and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("DojoQuest")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end,
})

QuestsTab:MakeToggle({
    Text = "Auto Draco Race",
    Default = Config.Quests.AutoDracoRace,
    Callback = function(state)
        Config.Quests.AutoDracoRace = state
        if state then
            spawn(function()
                while Config.Quests.AutoDracoRace and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("DracoRace")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end,
})

QuestsTab:MakeToggle({
    Text = "Auto Race V4",
    Default = Config.Quests.AutoRaceV4,
    Callback = function(state)
        Config.Quests.AutoRaceV4 = state
        if state then
            spawn(function()
                while Config.Quests.AutoRaceV4 and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("RaceV4")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end,
})

QuestsTab:MakeToggle({
    Text = "Auto Trial",
    Default = Config.Quests.AutoTrial,
    Callback = function(state)
        Config.Quests.AutoTrial = state
        if state then
            spawn(function()
                while Config.Quests.AutoTrial and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("StartTrial")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end,
})

QuestsTab:MakeToggle({
    Text = "Auto Awakening",
    Default = Config.Quests.AutoAwakening,
    Callback = function(state)
        Config.Quests.AutoAwakening = state
        if state then
            spawn(function()
                while Config.Quests.AutoAwakening and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("Awakening")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end,
})

QuestsTab:MakeToggle({
    Text = "Auto Pole",
    Default = Config.Quests.AutoPole,
    Callback = function(state)
        Config.Quests.AutoPole = state
        if state then
            spawn(function()
                while Config.Quests.AutoPole and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("PoleQuest")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end,
})

QuestsTab:MakeToggle({
    Text = "Auto Saber",
    Default = Config.Quests.AutoSaber,
    Callback = function(state)
        Config.Quests.AutoSaber = state
        if state then
            spawn(function()
                while Config.Quests.AutoSaber and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("SaberQuest")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end,
})

QuestsTab:MakeToggle({
    Text = "Auto Saw Sword",
    Default = Config.Quests.AutoSawSword,
    Callback = function(state)
        Config.Quests.AutoSawSword = state
        if state then
            spawn(function()
                while Config.Quests.AutoSawSword and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("SawSwordQuest")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end,
})

-- Funcionalidades da Aba Frutas
FruitsTab:MakeLabel({Text = "Opções de Frutas"})
FruitsTab:MakeToggle({
    Text = "Auto Coletar Frutas",
    Default = Config.Fruits.AutoCollectFruits,
    Callback = function(state)
        Config.Fruits.AutoCollectFruits = state
        if state then
            spawn(function()
                while Config.Fruits.AutoCollectFruits and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, fruit in pairs(workspace:GetChildren()) do
                        if fruit:IsA("Tool") and string.find(fruit.Name, "Fruit") then
                            pathfindTo(fruit.Handle.Position)
                            wait(randomDelay)
                        end
                    end
                    logMessage("Coletando frutas...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end,
})

FruitsTab:MakeToggle({
    Text = "Auto Armazenar Frutas",
    Default = Config.Fruits.AutoStoreFruits,
    Callback = function(state)
        Config.Fruits.AutoStoreFruits = state
        if state then
            spawn(function()
                while Config.Fruits.AutoStoreFruits and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("StoreFruit")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end,
})

FruitsTab:MakeToggle({
    Text = "Auto Fruta Aleatória",
    Default = Config.Fruits.AutoRandomFruit,
    Callback = function(state)
        Config.Fruits.AutoRandomFruit = state
        if state then
            spawn(function()
                while Config.Fruits.AutoRandomFruit and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("RandomFruit")
                        end
                    end)
                    wait(randomDelay)
                end
            end
