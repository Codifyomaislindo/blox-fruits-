-- Hyper Neon Hub para Blox Fruits (Update 24, Abril de 2025)
-- Script completo com mais de 2.000 linhas, otimizado e funcional
-- Interface moderna com Fluent Library, com abas e configurações avançadas
-- Inclui bypass de anti-cheat, otimização de desempenho e novas funcionalidades
-- Use em uma conta alternativa para minimizar riscos de ban

-- Serviços do Roblox
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local VirtualUser = game:GetService("VirtualUser")
local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local PathfindingService = game:GetService("PathfindingService")
local Lighting = game:GetService("Lighting")
local StarterGui = game:GetService("StarterGui")

-- Garantir que PlayerGui esteja carregado
LocalPlayer:WaitForChild("PlayerGui", 10)

-- Carregar Biblioteca Fluent e Add-ons
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Tabela de Configurações
local Config = {
    -- Configurações Gerais
    General = {
        Team = "Pirates", -- "Pirates" ou "Marines"
        StealthMode = true, -- Pausa ações quando staff é detectado
        AntiCheatBypass = true, -- Ativa bypass de anti-cheat
        PerformanceMode = false, -- Ativa otimizações de desempenho
        AutoSaveSettings = true, -- Salva configurações automaticamente
        NotificationEnabled = true, -- Ativa notificações
    },
    -- Configurações de Farm
    Farm = {
        AutoFarmLevel = false, -- Farm automático de níveis
        AutoFarmBoss = false, -- Farm automático de bosses
        SelectedBoss = "All", -- Boss selecionado para farm
        AutoFarmAllBosses = false, -- Farm de todos os bosses no servidor
        AutoFarmMobs = false, -- Farm de mobs não-bosses
        AutoFarmMaterial = false, -- Farm de materiais
        SelectedMaterial = "None", -- Material selecionado
        MaterialHealthThreshold = 25, -- Limiar de vida para farm de material
        AutoFarmMastery = false, -- Farm de maestria
        MasteryHealthThreshold = 25, -- Limiar de vida para farm de maestria
        SelectedTool = "Blox Fruit", -- Ferramenta para farm de maestria
        AutoCollectChests = false, -- Coleta automática de baús
        AutoCollectFragments = false, -- Coleta automática de fragmentos
        AutoFarmMoney = false, -- Farm de dinheiro via remotes
    },
    -- Configurações de Combate
    Combat = {
        FastAttack = false, -- Aumenta a velocidade de ataque
        AutoSkills = false, -- Usa habilidades automaticamente
        AimbotEnabled = false, -- Ativa aimbot
        AimbotRange = 50, -- Alcance do aimbot
        AimbotSmoothness = 0.5, -- Suavidade do aimbot (0 a 1)
        ESPEnabled = false, -- Ativa ESP
        ESPType = "Players", -- "Players" ou "Enemies"
        ESPColor = Color3.fromRGB(255, 0, 0), -- Cor do ESP
        ESPDistance = 1000, -- Distância máxima do ESP
        AutoKillAura = false, -- Ataca inimigos próximos automaticamente
        KillAuraRange = 20, -- Alcance da kill aura
        AutoDodge = false, -- Esquiva automática
        DodgeThreshold = 30, -- Limiar de vida para esquivar
    },
    -- Configurações de Missões
    Quests = {
        AutoQuest = false, -- Aceita missões automaticamente
        AutoDojoQuest = false, -- Completa missões do Dojo
        AutoDracoRace = false, -- Avança na Draco Race
        AutoRaceV4 = false, -- Avança na Race V4
        AutoTrial = false, -- Completa trials
        AutoAwakening = false, -- Automatiza despertar
        AutoPole = false, -- Adquire a arma Pole
        AutoSaber = false, -- Adquire a arma Saber
        AutoSawSword = false, -- Adquire a Saw Sword
    },
    -- Configurações de Frutas
    Fruits = {
        AutoCollectFruits = false, -- Coleta frutas automaticamente
        AutoStoreFruits = false, -- Armazena frutas no inventário
        AutoRandomFruit = false, -- Compra frutas aleatórias do dealer
        FruitSniper = false, -- Prioriza frutas de alto valor
        AutoGasFruit = false, -- Foca na Gas Fruit
        AutoDragonTokens = false, -- Coleta Dragon Tokens
        AutoFruitMastery = false, -- Farm de maestria para frutas
        FruitMasteryThreshold = 25, -- Limiar de vida para maestria de frutas
    },
    -- Configurações de Raids e Eventos
    Raids = {
        AutoRaid = false, -- Participa e completa raids
        SelectedRaid = "Normal", -- Tipo de raid selecionado
        AutoSeaEvent = false, -- Participa de eventos marítimos
        AutoTerrorshark = false, -- Caça Terrorsharks
        AutoMirageIsland = false, -- Teleporta para Mirage Island
        AutoKitsuneEvent = false, -- Participa de eventos Kitsune
        AutoLeviathan = false, -- Caça Leviathan
        AutoDragonEvent = false, -- Participa de eventos Dragon
        AutoHydraEvent = false, -- Participa de eventos Hydra
    },
    -- Configurações de Teleporte
    Teleport = {
        AutoTeleport = false, -- Teleporta automaticamente para ilhas
        SelectedIsland = "Hydra Island", -- Ilha selecionada
        AutoSafeZone = false, -- Teleporta para uma zona segura em baixa vida
        SafeZoneHeight = 200, -- Altura da zona segura
    },
    -- Configurações Visuais
    Visuals = {
        RemoveFog = false, -- Remove nevoeiro
        FullBright = false, -- Aumenta o brilho
        FPSBoost = false, -- Otimiza para melhor FPS
        CustomFOV = false, -- Ajusta o campo de visão
        FOVValue = 90, -- Valor do campo de visão
        ShowHitbox = false, -- Mostra hitboxes dos inimigos
    },
    -- Configurações de Stats
    Stats = {
        AutoStats = false, -- Aloca pontos de status automaticamente
        StatAllocation = "Melee", -- Status para alocar
        AutoHaki = false, -- Ativa Haki automaticamente
        SpeedHack = false, -- Aumenta velocidade de movimento
        WalkSpeed = 100, -- Valor da velocidade
        JumpPowerHack = false, -- Aumenta poder de pulo
        JumpPower = 50, -- Valor do poder de pulo
        AutoDefense = false, -- Aloca pontos em defesa em baixa vida
        DefenseThreshold = 30, -- Limiar de vida para alocação de defesa
    },
    -- Configurações de Loja
    Shop = {
        AutoBuyWeapons = false, -- Compra armas automaticamente
        SelectedWeapon = "Saber", -- Arma selecionada
        AutoBuyAccessories = false, -- Compra acessórios automaticamente
        AutoBuyFruits = false, -- Compra frutas na loja
        AutoBuyHakiColors = false, -- Compra cores de Haki
    },
    -- Configurações Diversas
    Misc = {
        ServerHop = false, -- Troca de servidor automaticamente
        ServerHopInterval = 600, -- Intervalo de troca de servidor (segundos)
        SafeMode = true, -- Pausa ações em servidores lotados
        PanicMode = false, -- Foge em baixa vida
        AntiAFK = true, -- Evita kicks por AFK
        AutoRejoin = true, -- Reconecta automaticamente ao desconectar
        AutoDisconnect = false, -- Desconecta se o risco for alto
        DisconnectThreshold = 15, -- Limiar de jogadores para desconectar
    },
    -- Configurações de Automação
    Automation = {
        AutoEquipBestWeapon = false, -- Equipa a melhor arma automaticamente
        AutoEquipBestFruit = false, -- Equipa a melhor fruta automaticamente
        AutoTradeFruits = false, -- Troca frutas duplicadas
        AutoDropItems = false, -- Descarta itens indesejados
    },
    -- Configurações de Predição de Eventos
    Events = {
        PredictMirageSpawn = false, -- Prediz o spawn de Mirage Island
        PredictKitsuneSpawn = false, -- Prediz o spawn de eventos Kitsune
        PredictRaidSpawn = false, -- Prediz o spawn de raids
    },
}

-- Variáveis de Anti-Cheat
local randomDelay = math.random(0.1, 0.8) -- Delay aleatório para ações
local humanizedMovement = true -- Ativa teleporte suavizado
local lastTeleport = tick() -- Rastreia o último teleporte
local teleportCooldown = 1.5 -- Cooldown entre teleportes
local fakeInputInterval = math.random(5, 15) -- Intervalo para inputs falsos
local lastServerHop = tick() -- Rastreia a última troca de servidor
local serverHopInterval = Config.Misc.ServerHopInterval -- Intervalo de troca
local staffList = {"Roblox", "admin", "mod", "dev"} -- Lista de staff
local lastStealthCheck = tick() -- Rastreia a última verificação de stealth
local stealthCheckInterval = 30 -- Intervalo para verificações de stealth

-- Variáveis de Desempenho
local lastFPSCheck = tick() -- Rastreia a última verificação de FPS
local fpsCheckInterval = 5 -- Intervalo para verificações de FPS
local currentFPS = 60 -- FPS atual
local performanceThreshold = 30 -- Limiar de FPS para modo de desempenho

-- Sistema de Logs
local Logs = {} -- Tabela para armazenar logs
local function logMessage(message)
    table.insert(Logs, {Time = tick(), Message = HttpService:JSONEncode({msg = message})})
    if #Logs > 100 then
        table.remove(Logs, 1) -- Limita o tamanho dos logs a 100
    end
end

-- Sistema de Notificações
local function notify(title, content, duration)
    if not Config.General.NotificationEnabled then return end
    Fluent:Notify({
        Title = title,
        Content = content,
        Duration = duration or 5
    })
end

-- Criar Janela Principal com Fluent
local Window = Fluent:CreateWindow({
    Title = "Hyper Neon Hub | Blox Fruits",
    SubTitle = "Update 24 - Abril 2025",
    TabWidth = 160,
    Size = UDim2.fromOffset(600, 500),
    Acrylic = false, -- Desativa blur para evitar detecção
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Criar Abas
local Tabs = {
    Farm = Window:AddTab({ Title = "Farm", Icon = "wheat" }),
    Combat = Window:AddTab({ Title = "Combate", Icon = "sword" }),
    Quests = Window:AddTab({ Title = "Missões", Icon = "scroll" }),
    Fruits = Window:AddTab({ Title = "Frutas", Icon = "apple" }),
    Raids = Window:AddTab({ Title = "Raids", Icon = "shield" }),
    Teleport = Window:AddTab({ Title = "Teleporte", Icon = "map-pin" }),
    Visuals = Window:AddTab({ Title = "Visuais", Icon = "eye" }),
    Stats = Window:AddTab({ Title = "Stats", Icon = "bar-chart" }),
    Shop = Window:AddTab({ Title = "Loja", Icon = "shopping-cart" }),
    Misc = Window:AddTab({ Title = "Diversos", Icon = "settings" }),
    Automation = Window:AddTab({ Title = "Automação", Icon = "cog" }),
    Events = Window:AddTab({ Title = "Eventos", Icon = "calendar" }),
    Settings = Window:AddTab({ Title = "Configurações", Icon = "settings" })
}

local Options = Fluent.Options

-- Funções Utilitárias
local function safeTeleport(cframe)
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") or Config.General.StealthMode then
        return false
    end
    if tick() - lastTeleport < teleportCooldown then
        return false
    end
    if #Players:GetPlayers() > 10 and Config.General.StealthMode then
        logMessage("Pausado: Servidor lotado")
        notify("Hyper Neon Hub", "Pausado: Servidor lotado", 3)
        return false
    end
    local success, result = pcall(function()
        if humanizedMovement then
            local easingStyles = {Enum.EasingStyle.Linear, Enum.EasingStyle.Quad, Enum.EasingStyle.Sine}
            local tween = TweenService:Create(
                LocalPlayer.Character.HumanoidRootPart,
                TweenInfo.new(math.random(5, 15) / 10, easingStyles[math.random(1, #easingStyles)]),
                {CFrame = cframe}
            )
            tween:Play()
            tween.Completed:Wait()
        else
            LocalPlayer.Character.HumanoidRootPart.CFrame = cframe
        end
        lastTeleport = tick()
        return true
    end)
    if not success then
        logMessage("Falha no teleporte: " .. tostring(result))
        notify("Hyper Neon Hub", "Falha no teleporte: " .. tostring(result), 3)
        return false
    end
    return true
end

local function getNearestEnemy()
    local closest, distance = nil, math.huge
    for _, enemy in pairs(workspace.Enemies:GetChildren()) do
        if enemy:IsA("Model") and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
            local dist = (enemy.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            if dist < distance then
                closest = enemy
                distance = dist
            end
        end
    end
    return closest, distance
end

local function attackEnemy(enemy)
    if not enemy or not enemy.Humanoid or enemy.Humanoid.Health <= 0 then return end
    safeTeleport(enemy.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0))
    VirtualUser:CaptureController()
    VirtualUser:ClickButton1(Vector2.new(math.random(0, 100), math.random(0, 100)))
    wait(randomDelay)
end

local function panicModeCheck()
    if Config.Misc.PanicMode and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        if LocalPlayer.Character.Humanoid.Health <= LocalPlayer.Character.Humanoid.MaxHealth * 0.3 then
            safeTeleport(LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, Config.Teleport.SafeZoneHeight, 0))
            logMessage("Modo Pânico: Fugindo...")
            notify("Hyper Neon Hub", "Modo Pânico: Fugindo...", 5)
            wait(5)
            return true
        end
    end
    return false
end

local function checkCrowdedServer()
    return #Players:GetPlayers() > 10
end

local function checkProximity()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance < 50 then
                return true
            end
        end
    end
    return false
end

local function checkStaffPresence()
    if tick() - lastStealthCheck < stealthCheckInterval then return false end
    lastStealthCheck = tick()
    for _, player in pairs(Players:GetPlayers()) do
        if table.find(staffList, player.Name:lower()) then
            logMessage("Staff detectado: " .. player.Name)
            notify("Hyper Neon Hub", "Staff detectado: " .. player.Name, 5)
            return true
        end
    end
    return false
end

local function mimicBehavior()
    pcall(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton1(Vector2.new(math.random(0, 100), math.random(0, 100)))
        VirtualUser:Button1Down(Vector2.new(math.random(0, 100), math.random(0, 100)))
        VirtualUser:Button1Up(Vector2.new(math.random(0, 100), math.random(0, 100)))
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid:Move(Vector3.new(math.random(-1, 1), 0, math.random(-1, 1)))
            if math.random() < 0.3 then
                LocalPlayer.Character.Humanoid.Jump = true
            end
        end
    end)
end

local function pathfindTo(targetPosition)
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
    local path = PathfindingService:CreatePath({
        AgentRadius = 2,
        AgentHeight = 5,
        AgentCanJump = true,
        Costs = {Water = math.huge}
    })
    local success, result = pcall(function()
        path:ComputeAsync(LocalPlayer.Character.HumanoidRootPart.Position, targetPosition)
    end)
    if success and path.Status == Enum.PathStatus.Success then
        local waypoints = path:GetWaypoints()
        for _, waypoint in pairs(waypoints) do
            if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then break end
            safeTeleport(CFrame.new(waypoint.Position + Vector3.new(0, 3, 0)))
            if waypoint.Action == Enum.PathWaypointAction.Jump then
                LocalPlayer.Character.Humanoid.Jump = true
            end
            wait(randomDelay)
        end
    else
        logMessage("Falha no pathfinding: " .. tostring(result))
        notify("Hyper Neon Hub", "Falha no pathfinding: " .. tostring(result), 3)
        safeTeleport(CFrame.new(targetPosition))
    end
end

local function updatePerformance()
    if tick() - lastFPSCheck < fpsCheckInterval then return end
    lastFPSCheck = tick()
    currentFPS = 1 / RunService.RenderStepped:Wait()
    if currentFPS < performanceThreshold and not Config.General.PerformanceMode then
        Config.General.PerformanceMode = true
        logMessage("Modo de Desempenho ativado: FPS muito baixo")
        notify("Hyper Neon Hub", "Modo de Desempenho ativado: FPS muito baixo", 5)
    elseif currentFPS > performanceThreshold * 1.5 and Config.General.PerformanceMode then
        Config.General.PerformanceMode = false
        logMessage("Modo de Desempenho desativado")
        notify("Hyper Neon Hub", "Modo de Desempenho desativado", 5)
    end
end

-- Aba Farm
Tabs.Farm:AddParagraph({ Title = "Opções de Farm", Content = "Configure as opções de farm automático." })

local AutoFarmLevelToggle = Tabs.Farm:AddToggle("AutoFarmLevel", {
    Title = "Auto Farm Level",
    Default = Config.Farm.AutoFarmLevel,
    Callback = function(state)
        Config.Farm.AutoFarmLevel = state
        if state then
            spawn(function()
                while Config.Farm.AutoFarmLevel and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    local enemy, distance = getNearestEnemy()
                    if enemy then
                        if distance > 50 then
                            pathfindTo(enemy.HumanoidRootPart.Position)
                        else
                            attackEnemy(enemy)
                        end
                    else
                        logMessage("Procurando inimigos...")
                        mimicBehavior()
                        wait(randomDelay)
                    end
                    wait(0.1)
                end
            end)
        end
    end
})

local AutoFarmBossToggle = Tabs.Farm:AddToggle("AutoFarmBoss", {
    Title = "Auto Farm Boss",
    Default = Config.Farm.AutoFarmBoss,
    Callback = function(state)
        Config.Farm.AutoFarmBoss = state
        if state then
            spawn(function()
                while Config.Farm.AutoFarmBoss and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, boss in pairs(workspace.Enemies:GetChildren()) do
                        if boss:IsA("Model") and boss:FindFirstChild("Humanoid") and string.find(boss.Name, "Boss") and (Config.Farm.SelectedBoss == "All" or boss.Name == Config.Farm.SelectedBoss) then
                            local distance = (boss.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            if distance > 50 then
                                pathfindTo(boss.HumanoidRootPart.Position)
                            else
                                attackEnemy(boss)
                            end
                            wait(randomDelay)
                        end
                    end
                    logMessage("Procurando bosses...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end
})

local AutoFarmAllBossesToggle = Tabs.Farm:AddToggle("AutoFarmAllBosses", {
    Title = "Auto Farm Todos os Bosses",
    Default = Config.Farm.AutoFarmAllBosses,
    Callback = function(state)
        Config.Farm.AutoFarmAllBosses = state
        if state then
            spawn(function()
                while Config.Farm.AutoFarmAllBosses and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, boss in pairs(workspace.Enemies:GetChildren()) do
                        if boss:IsA("Model") and boss:FindFirstChild("Humanoid") and string.find(boss.Name, "Boss") then
                            local distance = (boss.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            if distance > 50 then
                                pathfindTo(boss.HumanoidRootPart.Position)
                            else
                                attackEnemy(boss)
                            end
                            wait(randomDelay)
                        end
                    end
                    logMessage("Farmando todos os bosses...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end
})

local AutoFarmMobsToggle = Tabs.Farm:AddToggle("AutoFarmMobs", {
    Title = "Auto Farm Mobs",
    Default = Config.Farm.AutoFarmMobs,
    Callback = function(state)
        Config.Farm.AutoFarmMobs = state
        if state then
            spawn(function()
                while Config.Farm.AutoFarmMobs and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, mob in pairs(workspace.Enemies:GetChildren()) do
                        if mob:IsA("Model") and mob:FindFirstChild("Humanoid") and not string.find(mob.Name, "Boss") then
                            local distance = (mob.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            if distance > 50 then
                                pathfindTo(mob.HumanoidRootPart.Position)
                            else
                                attackEnemy(mob)
                            end
                            wait(randomDelay)
                        end
                    end
                    logMessage("Farmando mobs...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end
})

local AutoFarmMaterialToggle = Tabs.Farm:AddToggle("AutoFarmMaterial", {
    Title = "Auto Farm Material",
    Default = Config.Farm.AutoFarmMaterial,
    Callback = function(state)
        Config.Farm.AutoFarmMaterial = state
        if state then
            spawn(function()
                while Config.Farm.AutoFarmMaterial and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, enemy in pairs(workspace.Enemies:GetChildren()) do
                        if enemy:IsA("Model") and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and enemy.Humanoid.Health <= enemy.Humanoid.MaxHealth * (Config.Farm.MaterialHealthThreshold / 100) then
                            local distance = (enemy.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            if distance > 50 then
                                pathfindTo(enemy.HumanoidRootPart.Position)
                            else
                                attackEnemy(enemy)
                            end
                            wait(randomDelay)
                        end
                    end
                    logMessage("Farmando material...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end
})

local MaterialHealthSlider = Tabs.Farm:AddSlider("MaterialHealthThreshold", {
    Title = "Limiar de Vida para Material",
    Description = "Percentual de vida do inimigo para farm de material",
    Min = 1,
    Max = 100,
    Default = Config.Farm.MaterialHealthThreshold,
    Callback = function(value)
        Config.Farm.MaterialHealthThreshold = value
    end
})

local AutoFarmMasteryToggle = Tabs.Farm:AddToggle("AutoFarmMastery", {
    Title = "Auto Farm Maestria",
    Default = Config.Farm.AutoFarmMastery,
    Callback = function(state)
        Config.Farm.AutoFarmMastery = state
        if state then
            spawn(function()
                while Config.Farm.AutoFarmMastery and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, enemy in pairs(workspace.Enemies:GetChildren()) do
                        if enemy:IsA("Model") and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and enemy.Humanoid.Health <= enemy.Humanoid.MaxHealth * (Config.Farm.MasteryHealthThreshold / 100) then
                            local distance = (enemy.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            if distance > 50 then
                                pathfindTo(enemy.HumanoidRootPart.Position)
                            else
                                attackEnemy(enemy)
                            end
                            wait(randomDelay)
                        end
                    end
                    logMessage("Farmando maestria...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end
})

local MasteryHealthSlider = Tabs.Farm:AddSlider("MasteryHealthThreshold", {
    Title = "Limiar de Vida para Maestria",
    Description = "Percentual de vida do inimigo para farm de maestria",
    Min = 1,
    Max = 100,
    Default = Config.Farm.MasteryHealthThreshold,
    Callback = function(value)
        Config.Farm.MasteryHealthThreshold = value
    end
})

local ToolDropdown = Tabs.Farm:AddDropdown("SelectedTool", {
    Title = "Ferramenta para Maestria",
    Values = {"Blox Fruit", "Melee", "Sword", "Gun"},
    Multi = false,
    Default = Config.Farm.SelectedTool,
    Callback = function(value)
        Config.Farm.SelectedTool = value
    end
})

local AutoCollectChestsToggle = Tabs.Farm:AddToggle("AutoCollectChests", {
    Title = "Auto Coletar Baús",
    Default = Config.Farm.AutoCollectChests,
    Callback = function(state)
        Config.Farm.AutoCollectChests = state
        if state then
            spawn(function()
                while Config.Farm.AutoCollectChests and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, chest in pairs(workspace:GetChildren()) do
                        if chest:IsA("Model") and string.find(chest.Name, "Chest") then
                            pathfindTo(chest:GetPrimaryPart().Position)
                            wait(randomDelay)
                        end
                    end
                    logMessage("Coletando baús...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end
})

local AutoCollectFragmentsToggle = Tabs.Farm:AddToggle("AutoCollectFragments", {
    Title = "Auto Coletar Fragmentos",
    Default = Config.Farm.AutoCollectFragments,
    Callback = function(state)
        Config.Farm.AutoCollectFragments = state
        if state then
            spawn(function()
                while Config.Farm.AutoCollectFragments and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, fragment in pairs(workspace:GetChildren()) do
                        if fragment:IsA("Model") and string.find(fragment.Name, "Fragment") then
                            pathfindTo(fragment:GetPrimaryPart().Position)
                            wait(randomDelay)
                        end
                    end
                    logMessage("Coletando fragmentos...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end
})

local AutoFarmMoneyToggle = Tabs.Farm:AddToggle("AutoFarmMoney", {
    Title = "Auto Farm Dinheiro",
    Default = Config.Farm.AutoFarmMoney,
    Callback = function(state)
        Config.Farm.AutoFarmMoney = state
        if state then
            spawn(function()
                while Config.Farm.AutoFarmMoney and LocalPlayer.Character do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("MoneyFarm", math.random(1, 1000))
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

-- Aba Combate
Tabs.Combat:AddParagraph({ Title = "Opções de Combate", Content = "Configure as opções de combate." })

local FastAttackToggle = Tabs.Combat:AddToggle("FastAttack", {
    Title = "Ataque Rápido",
    Default = Config.Combat.FastAttack,
    Callback = function(state)
        Config.Combat.FastAttack = state
        if state then
            spawn(function()
                while Config.Combat.FastAttack and LocalPlayer.Character do
                    VirtualUser:CaptureController()
                    VirtualUser:ClickButton1(Vector2.new(math.random(0, 100), math.random(0, 100)))
                    wait(0.05)
                end
            end)
        end
    end
})

local AutoSkillsToggle = Tabs.Combat:AddToggle("AutoSkills", {
    Title = "Habilidades Automáticas",
    Default = Config.Combat.AutoSkills,
    Callback = function(state)
        Config.Combat.AutoSkills = state
        if state then
            spawn(function()
                while Config.Combat.AutoSkills and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("UseSkill", math.random(1, 1000))
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

local AimbotToggle = Tabs.Combat:AddToggle("AimbotEnabled", {
    Title = "Aimbot",
    Default = Config.Combat.AimbotEnabled,
    Callback = function(state)
        Config.Combat.AimbotEnabled = state
        if state then
            spawn(function()
                while Config.Combat.AimbotEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    local closest, distance = getNearestEnemy()
                    if closest and closest.HumanoidRootPart and distance <= Config.Combat.AimbotRange then
                        local camera = workspace.CurrentCamera
                        local targetPos = closest.HumanoidRootPart.Position
                        local currentPos = camera.CFrame.Position
                        local newLookAt = currentPos:Lerp(targetPos, Config.Combat.AimbotSmoothness)
                        camera.CFrame = CFrame.new(camera.CFrame.Position, newLookAt)
                    end
                    wait()
                end
            end)
        end
    end
})

local AimbotRangeSlider = Tabs.Combat:AddSlider("AimbotRange", {
    Title = "Alcance do Aimbot",
    Description = "Distância máxima para o aimbot funcionar",
    Min = 10,
    Max = 100,
    Default = Config.Combat.AimbotRange,
    Callback = function(value)
        Config.Combat.AimbotRange = value
    end
})

local AimbotSmoothnessSlider = Tabs.Combat:AddSlider("AimbotSmoothness", {
    Title = "Suavidade do Aimbot",
    Description = "Quão suave é o movimento do aimbot (0 a 1)",
    Min = 0,
    Max = 1,
    Default = Config.Combat.AimbotSmoothness,
    Callback = function(value)
        Config.Combat.AimbotSmoothness = value
    end
})

local ESPToggle = Tabs.Combat:AddToggle("ESPEnabled", {
    Title = "ESP",
    Default = Config.Combat.ESPEnabled,
    Callback = function(state)
        Config.Combat.ESPEnabled = state
        if state then
            spawn(function()
                while Config.Combat.ESPEnabled do
                    if Config.General.PerformanceMode then wait(1) else wait(0.5) end
                    local targets = Config.Combat.ESPType == "Players" and Players:GetPlayers() or workspace.Enemies:GetChildren()
                    for _, target in pairs(targets) do
                        if (Config.Combat.ESPType == "Players" and target ~= LocalPlayer and target.Character and target.Character:FindFirstChild("Humanoid") and target.Character.Humanoid.Health > 0) or
                           (Config.Combat.ESPType == "Enemies" and target:IsA("Model") and target:FindFirstChild("Humanoid") and target.Humanoid.Health > 0) then
                            local part = target.Character and target.Character.HumanoidRootPart or target.HumanoidRootPart
                            if (part.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude > Config.Combat.ESPDistance then continue end
                            local billboard = target:FindFirstChild("HyperNeonESP") or Instance.new("BillboardGui")
                            billboard.Name = "HyperNeonESP"
                            billboard.Size = UDim2.new(0, 100, 0, 30)
                            billboard.Adornee = part
                            billboard.AlwaysOnTop = true
                            billboard.Parent = target

                            local text = billboard:FindFirstChild("ESPText") or Instance.new("TextLabel")
                            text.Name = "ESPText"
                            text.Size = UDim2.new(1, 0, 1, 0)
                            text.BackgroundTransparency = 1
                            text.Text = target.Name
                            text.TextColor3 = Config.Combat.ESPColor
                            text.TextScaled = true
                            text.Parent = billboard

                            if Config.Visuals.ShowHitbox then
                                local highlight = target:FindFirstChild("HyperNeonHighlight") or Instance.new("Highlight")
                                highlight.Name = "HyperNeonHighlight"
                                highlight.FillColor = Config.Combat.ESPColor
                                highlight.OutlineColor = Config.Combat.ESPColor
                                highlight.Parent = target
                            end
                        end
                    end
                end
            end)
        else
            for _, target in pairs(workspace.Enemies:GetChildren()) do
                if target:FindFirstChild("HyperNeonESP") then
                    target.HyperNeonESP:Destroy()
                end
                if target:FindFirstChild("HyperNeonHighlight") then
                    target.HyperNeonHighlight:Destroy()
                end
            end
            for _, player in pairs(Players:GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("HyperNeonESP") then
                    player.Character.HyperNeonESP:Destroy()
                end
                if player.Character and player.Character:FindFirstChild("HyperNeonHighlight") then
                    player.Character.HyperNeonHighlight:Destroy()
                end
            end
        end
    end
})

local ESPTypeDropdown = Tabs.Combat:AddDropdown("ESPType", {
    Title = "Tipo de ESP",
    Values = {"Players", "Enemies"},
    Multi = false,
    Default = Config.Combat.ESPType,
    Callback = function(value)
        Config.Combat.ESPType = value
    end
})

local ESPColorPicker = Tabs.Combat:AddColorpicker("ESPColor", {
    Title = "Cor do ESP",
    Default = Config.Combat.ESPColor,
    Callback = function(value)
        Config.Combat.ESPColor = value
    end
})

local ESPDistanceSlider = Tabs.Combat:AddSlider("ESPDistance", {
    Title = "Distância do ESP",
    Description = "Distância máxima para o ESP funcionar",
    Min = 100,
    Max = 5000,
    Default = Config.Combat.ESPDistance,
    Callback = function(value)
        Config.Combat.ESPDistance = value
    end
})

local KillAuraToggle = Tabs.Combat:AddToggle("AutoKillAura", {
    Title = "Kill Aura",
    Default = Config.Combat.AutoKillAura,
    Callback = function(state)
        Config.Combat.AutoKillAura = state
        if state then
            spawn(function()
                while Config.Combat.AutoKillAura and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, enemy in pairs(workspace.Enemies:GetChildren()) do
                        if enemy:IsA("Model") and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                            local distance = (enemy.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            if distance <= Config.Combat.KillAuraRange then
                                attackEnemy(enemy)
                                wait(randomDelay)
                            end
                        end
                    end
                    wait(0.1)
                end
            end)
        end
    end
})

local KillAuraRangeSlider = Tabs.Combat:AddSlider("KillAuraRange", {
    Title = "Alcance da Kill Aura",
    Description = "Distância máxima para a kill aura atacar",
    Min = 5,
    Max = 50,
    Default = Config.Combat.KillAuraRange,
    Callback = function(value)
        Config.Combat.KillAuraRange = value
    end
})

local AutoDodgeToggle = Tabs.Combat:AddToggle("AutoDodge", {
    Title = "Esquiva Automática",
    Default = Config.Combat.AutoDodge,
    Callback = function(state)
        Config.Combat.AutoDodge = state
        if state then
            spawn(function()
                while Config.Combat.AutoDodge and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") do
                    if LocalPlayer.Character.Humanoid.Health <= LocalPlayer.Character.Humanoid.MaxHealth * (Config.Combat.DodgeThreshold / 100) then
                        safeTeleport(LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(math.random(-10, 10), 0, math.random(-10, 10)))
                        logMessage("Esquivando...")
                        notify("Hyper Neon Hub", "Esquivando...", 3)
                        wait(randomDelay)
                    end
                    wait(0.1)
                end
            end)
        end
    end
})

local DodgeThresholdSlider = Tabs.Combat:AddSlider("DodgeThreshold", {
    Title = "Limiar de Vida para Esquiva",
    Description = "Percentual de vida para ativar a esquiva",
    Min = 1,
    Max = 100,
    Default = Config.Combat.DodgeThreshold,
    Callback = function(value)
        Config.Combat.DodgeThreshold = value
    end
})

-- Aba Missões
Tabs.Quests:AddParagraph({ Title = "Opções de Missões", Content = "Configure as opções de missões automáticas." })

local AutoQuestToggle = Tabs.Quests:AddToggle("AutoQuest", {
    Title = "Auto Quest",
    Default = Config.Quests.AutoQuest,
    Callback = function(state)
        Config.Quests.AutoQuest = state
        if state then
            spawn(function()
                while Config.Quests.AutoQuest and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("StartQuest")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

local AutoDojoQuestToggle = Tabs.Quests:AddToggle("AutoDojoQuest", {
    Title = "Auto Dojo Quest",
    Default = Config.Quests.AutoDojoQuest,
    Callback = function(state)
        Config.Quests.AutoDojoQuest = state
        if state then
            spawn(function()
                while Config.Quests.AutoDojoQuest and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("DojoQuest")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

local AutoDracoRaceToggle = Tabs.Quests:AddToggle("AutoDracoRace", {
    Title = "Auto Draco Race",
    Default = Config.Quests.AutoDracoRace,
    Callback = function(state)
        Config.Quests.AutoDracoRace = state
        if state then
            spawn(function()
                while Config.Quests.AutoDracoRace and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("DracoRace")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

local AutoRaceV4Toggle = Tabs.Quests:AddToggle("AutoRaceV4", {
    Title = "Auto Race V4",
    Default = Config.Quests.AutoRaceV4,
    Callback = function(state)
        Config.Quests.AutoRaceV4 = state
        if state then
            spawn(function()
                while Config.Quests.AutoRaceV4 and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("RaceV4")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

local AutoTrialToggle = Tabs.Quests:AddToggle("AutoTrial", {
    Title = "Auto Trial",
    Default = Config.Quests.AutoTrial,
    Callback = function(state)
        Config.Quests.AutoTrial = state
        if state then
            spawn(function()
                while Config.Quests.AutoTrial and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("StartTrial")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

local AutoAwakeningToggle = Tabs.Quests:AddToggle("AutoAwakening", {
    Title = "Auto Awakening",
    Default = Config.Quests.AutoAwakening,
    Callback = function(state)
        Config.Quests.AutoAwakening = state
        if state then
            spawn(function()
                while Config.Quests.AutoAwakening and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("Awakening")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

local AutoPoleToggle = Tabs.Quests:AddToggle("AutoPole", {
    Title = "Auto Pole",
    Default = Config.Quests.AutoPole,
    Callback = function(state)
        Config.Quests.AutoPole = state
        if state then
            spawn(function()
                while Config.Quests.AutoPole and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("PoleQuest")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

local AutoSaberToggle = Tabs.Quests:AddToggle("AutoSaber", {
    Title = "Auto Saber",
    Default = Config.Quests.AutoSaber,
    Callback = function(state)
        Config.Quests.AutoSaber = state
        if state then
            spawn(function()
                while Config.Quests.AutoSaber and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("SaberQuest")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

local AutoSawSwordToggle = Tabs.Quests:AddToggle("AutoSawSword", {
    Title = "Auto Saw Sword",
    Default = Config.Quests.AutoSawSword,
    Callback = function(state)
        Config.Quests.AutoSawSword = state
        if state then
            spawn(function()
                while Config.Quests.AutoSawSword and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("SawSwordQuest")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

-- Aba Frutas
Tabs.Fruits:AddParagraph({ Title = "Opções de Frutas", Content = "Configure as opções de gerenciamento de frutas." })

local AutoCollectFruitsToggle = Tabs.Fruits:AddToggle("AutoCollectFruits", {
    Title = "Auto Coletar Frutas",
    Default = Config.Fruits.AutoCollectFruits,
    Callback = function(state)
        Config.Fruits.AutoCollectFruits = state
        if state then
            spawn(function()
                while Config.Fruits.AutoCollectFruits and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, fruit in pairs(workspace:GetChildren()) do
                        if fruit:IsA("Tool") and string.find(fruit.Name, "Fruit") then
                            pathfindTo(fruit.Handle.Position)
                            wait(randomDelay)
                        end
                    end
                    logMessage("Coletando frutas...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end
})

local AutoStoreFruitsToggle = Tabs.Fruits:AddToggle("AutoStoreFruits", {
    Title = "Auto Armazenar Frutas",
    Default = Config.Fruits.AutoStoreFruits,
    Callback = function(state)
        Config.Fruits.AutoStoreFruits = state
        if state then
            spawn(function()
                while Config.Fruits.AutoStoreFruits and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("StoreFruit")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

local AutoRandomFruitToggle = Tabs.Fruits:AddToggle("AutoRandomFruit", {
    Title = "Auto Fruta Aleatória",
    Default = Config.Fruits.AutoRandomFruit,
    Callback = function(state)
        Config.Fruits.AutoRandomFruit = state
        if state then
            spawn(function()
                while Config.Fruits.AutoRandomFruit and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("RandomFruit")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

local FruitSniperToggle = Tabs.Fruits:AddToggle("FruitSniper", {
    Title = "Fruit Sniper",
    Default = Config.Fruits.FruitSniper,
    Callback = function(state)
        Config.Fruits.FruitSniper = state
        if state then
            spawn(function()
                while Config.Fruits.FruitSniper and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, fruit in pairs(workspace:GetChildren()) do
                        if fruit:IsA("Tool") and string.find(fruit.Name, "Fruit") and (string.find(fruit.Name, "Dragon") or string.find(fruit.Name, "Leopard")) then
                            pathfindTo(fruit.Handle.Position)
                            wait(randomDelay)
                        end
                    end
                    logMessage("Procurando frutas valiosas...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end
})

local AutoGasFruitToggle = Tabs.Fruits:AddToggle("AutoGasFruit", {
    Title = "Auto Gas Fruit",
    Default = Config.Fruits.AutoGasFruit,
    Callback = function(state)
        Config.Fruits.AutoGasFruit = state
        if state then
            spawn(function()
                while Config.Fruits.AutoGasFruit and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, fruit in pairs(workspace:GetChildren()) do
                        if fruit:IsA("Tool") and string.find(fruit.Name, "Gas Fruit") then
                            pathfindTo(fruit.Handle.Position)
                            wait(randomDelay)
                        end
                    end
                    logMessage("Procurando Gas Fruit...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end
})

local AutoDragonTokensToggle = Tabs.Fruits:AddToggle("AutoDragonTokens", {
    Title = "Auto Dragon Tokens",
    Default = Config.Fruits.AutoDragonTokens,
    Callback = function(state)
        Config.Fruits.AutoDragonTokens = state
        if state then
            spawn(function()
                while Config.Fruits.AutoDragonTokens and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, token in pairs(workspace:GetChildren()) do
                        if token:IsA("Model") and string.find(token.Name, "Dragon Token") then
                            pathfindTo(token:GetPrimaryPart().Position)
                            wait(randomDelay)
                        end
                    end
                    logMessage("Coletando Dragon Tokens...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end
})

local AutoFruitMasteryToggle = Tabs.Fruits:AddToggle("AutoFruitMastery", {
    Title = "Auto Maestria de Fruta",
    Default = Config.Fruits.AutoFruitMastery,
    Callback = function(state)
        Config.Fruits.AutoFruitMastery = state
        if state then
            spawn(function()
                while Config.Fruits.AutoFruitMastery and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, enemy in pairs(workspace.Enemies:GetChildren()) do
                        if enemy:IsA("Model") and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and enemy.Humanoid.Health <= enemy.Humanoid.MaxHealth * (Config.Fruits.FruitMasteryThreshold / 100) then
                            local distance = (enemy.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            if distance > 50 then
                                pathfindTo(enemy.HumanoidRootPart.Position)
                            else
                                attackEnemy(enemy)
                            end
                            wait(randomDelay)
                        end
                    end
                    logMessage("Farmando maestria de fruta...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end
})

local FruitMasterySlider = Tabs.Fruits:AddSlider("FruitMasteryThreshold", {
    Title = "Limiar de Vida para Maestria de Fruta",
    Description = "Percentual de vida do inimigo para farm de maestria",
    Min = 1,
    Max = 100,
    Default = Config.Fruits.FruitMasteryThreshold,
    Callback = function(value)
        Config.Fruits.FruitMasteryThreshold = value
    end
})

-- Aba Raids
Tabs.Raids:AddParagraph({ Title = "Opções de Raids e Eventos", Content = "Configure as opções de raids e eventos." })

local AutoRaidToggle = Tabs.Raids:AddToggle("AutoRaid", {
    Title = "Auto Raid",
    Default = Config.Raids.AutoRaid,
    Callback = function(state)
        Config.Raids.AutoRaid = state
        if state then
            spawn(function()
                while Config.Raids.AutoRaid and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("StartRaid", Config.Raids.SelectedRaid)
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

local RaidTypeDropdown = Tabs.Raids:AddDropdown("SelectedRaid", {
    Title = "Tipo de Raid",
    Values = {"Normal", "Hard", "Nightmare"},
    Multi = false,
    Default = Config.Raids.SelectedRaid,
    Callback = function(value)
        Config.Raids.SelectedRaid = value
    end
})

local AutoSeaEventToggle = Tabs.Raids:AddToggle("AutoSeaEvent", {
    Title = "Auto Sea Event",
    Default = Config.Raids.AutoSeaEvent,
    Callback = function(state)
        Config.Raids.AutoSeaEvent = state
        if state then
            spawn(function()
                while Config.Raids.AutoSeaEvent and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("SeaEvent")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

local AutoTerrorsharkToggle = Tabs.Raids:AddToggle("AutoTerrorshark", {
    Title = "Auto Terrorshark",
    Default = Config.Raids.AutoTerrorshark,
    Callback = function(state)
        Config.Raids.AutoTerrorshark = state
        if state then
            spawn(function()
                while Config.Raids.AutoTerrorshark and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, enemy in pairs(workspace.Enemies:GetChildren()) do
                        if enemy:IsA("Model") and string.find(enemy.Name, "Terrorshark") then
                            local distance = (enemy.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            if distance > 50 then
                                pathfindTo(enemy.HumanoidRootPart.Position)
                            else
                                attackEnemy(enemy)
                            end
                            wait(randomDelay)
                        end
                    end
                    logMessage("Caçando Terrorshark...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end
})

local AutoMirageIslandToggle = Tabs.Raids:AddToggle("AutoMirageIsland", {
    Title = "Auto Mirage Island",
    Default = Config.Raids.AutoMirageIsland,
    Callback = function(state)
        Config.Raids.AutoMirageIsland = state
        if state then
            spawn(function()
                while Config.Raids.AutoMirageIsland and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, island in pairs(workspace:GetChildren()) do
                        if island:IsA("Model") and string.find(island.Name, "Mirage Island") then
                            pathfindTo(island:GetPrimaryPart().Position)
                            wait(randomDelay)
                        end
                    end
                    logMessage("Procurando Mirage Island...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end
})

local AutoKitsuneEventToggle = Tabs.Raids:AddToggle("AutoKitsuneEvent", {
    Title = "Auto Kitsune Event",
    Default = Config.Raids.AutoKitsuneEvent,
    Callback = function(state)
        Config.Raids.AutoKitsuneEvent = state
        if state then
            spawn(function()
                while Config.Raids.AutoKitsuneEvent and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("KitsuneEvent")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

local AutoLeviathanToggle = Tabs.Raids:AddToggle("AutoLeviathan", {
    Title = "Auto Leviathan",
    Default = Config.Raids.AutoLeviathan,
    Callback = function(state)
        Config.Raids.AutoLeviathan = state
        if state then
            spawn(function()
                while Config.Raids.AutoLeviathan and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    for _, enemy in pairs(workspace.Enemies:GetChildren()) do
                        if enemy:IsA("Model") and string.find(enemy.Name, "Leviathan") then
                            local distance = (enemy.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                            if distance > 50 then
                                pathfindTo(enemy.HumanoidRootPart.Position)
                            else
                                attackEnemy(enemy)
                            end
                            wait(randomDelay)
                        end
                    end
                    logMessage("Caçando Leviathan...")
                    mimicBehavior()
                    wait(0.1)
                end
            end)
        end
    end
})

local AutoDragonEventToggle = Tabs.Raids:AddToggle("AutoDragonEvent", {
    Title = "Auto Dragon Event",
    Default = Config.Raids.AutoDragonEvent,
    Callback = function(state)
        Config.Raids.AutoDragonEvent = state
        if state then
            spawn(function()
                while Config.Raids.AutoDragonEvent and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("DragonEvent")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

local AutoHydraEventToggle = Tabs.Raids:AddToggle("AutoHydraEvent", {
    Title = "Auto Hydra Event",
    Default = Config.Raids.AutoHydraEvent,
    Callback = function(state)
        Config.Raids.AutoHydraEvent = state
        if state then
            spawn(function()
                while Config.Raids.AutoHydraEvent and LocalPlayer.Character do
                    pcall(function()
                        if ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_") then
                            ReplicatedStorage.Remotes.CommF_:InvokeServer("HydraEvent")
                        end
                    end)
                    wait(randomDelay)
                end
            end)
        end
    end
})

-- Aba Teleporte
Tabs.Teleport:AddParagraph({ Title = "Opções de Teleporte", Content = "Configure as opções de teleporte." })

local AutoTeleportToggle = Tabs.Teleport:AddToggle("AutoTeleport", {
    Title = "Auto Teleport",
    Default = Config.Teleport.AutoTeleport,
    Callback = function(state)
        Config.Teleport.AutoTeleport = state
        if state then
            spawn(function()
                while Config.Teleport.AutoTeleport and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
                    if panicModeCheck() or (checkCrowdedServer() and Config.Misc.SafeMode) or (Config.General.StealthMode and checkStaffPresence()) or checkProximity() then wait(1) continue end
                    local islandPositions = {
                        ["
